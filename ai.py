import streamlit as st
import string
from spacy.lang.en.stop_words import STOP_WORDS as stopwords
import pickle

# ------------------------------
# Page Configuration
# ------------------------------
st.set_page_config(page_title="AI Detector", page_icon="ü§ñ", layout="centered")

# ------------------------------
# Custom CSS for Background & Styling
# ------------------------------
page_bg = """
<style>
/* Gradient background */
[data-testid="stAppViewContainer"] {
    background: linear-gradient(to right, #2c3e50, #3498db);
    color: white;
}

/* Title */
h1 {
    text-align: center;
    color: #f1f1f1;
    font-size: 42px;
}

/* Text area */
textarea {
    border-radius: 12px !important;
    border: 2px solid #2980b9 !important;
    font-size: 16px !important;
}

/* Result card */
.result-box {
    background: rgba(255, 255, 255, 0.1);
    padding: 20px;
    border-radius: 15px;
    text-align: center;
    font-size: 22px;
    font-weight: bold;
    margin-top: 20px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
}

/* Footer */
.footer {
    margin-top: 40px;
    text-align: center;
    font-size: 14px;
    color: #f1f1f1;
}
</style>
"""
st.markdown(page_bg, unsafe_allow_html=True)

# ------------------------------
# App Title
# ------------------------------
st.title("ü§ñ AI Detector")
st.write("Paste your text below (at least **40‚Äì50 words**) and check if it's written by a human or AI.")

# ------------------------------
# Contractions Dictionary
# ------------------------------
contractions = {
    "ain't": "am not","aren't": "are not","can't": "cannot","can't've": "cannot have",
    "'cause": "because","could've": "could have","couldn't": "could not","couldn't've": "could not have",
    "didn't": "did not","doesn't": "does not","don't": "do not","hadn't": "had not","hadn't've": "had not have",
    "hasn't": "has not","haven't": "have not","he'd": "he would","he'd've": "he would have",
    "he'll": "he will","he'll've": "he will have","he's": "he is","how'd": "how did",
    "how'd'y": "how do you","how'll": "how will","how's": "how does","i'd": "i would",
    "i'd've": "i would have","i'll": "i will","i'll've": "i will have","i'm": "i am",
    "i've": "i have","isn't": "is not","it'd": "it would","it'd've": "it would have",
    "it'll": "it will","it'll've": "it will have","it's": "it is","let's": "let us",
    "ma'am": "madam","mayn't": "may not","might've": "might have","mightn't": "might not",
    "mightn't've": "might not have","must've": "must have","mustn't": "must not","mustn't've": "must not have",
    "needn't": "need not","needn't've": "need not have","o'clock": "of the clock","oughtn't": "ought not",
    "oughtn't've": "ought not have","shan't": "shall not","sha'n't": "shall not","shan't've": "shall not have",
    "she'd": "she would","she'd've": "she would have","she'll": "she will","she'll've": "she will have",
    "she's": "she is","should've": "should have","shouldn't": "should not","shouldn't've": "should not have",
    "so've": "so have","so's": "so is","that'd": "that would","that'd've": "that would have",
    "that's": "that is","there'd": "there would","there'd've": "there would have","there's": "there is",
    "they'd": "they would","they'd've": "they would have","they'll": "they will","they'll've": "they will have",
    "they're": "they are","they've": "they have","to've": "to have","wasn't": "was not",
    " u ": " you "," ur ": " your "," n ": " and ","won't": "would not",
    'dis': 'this','bak': 'back','brng': 'bring'
}

# ------------------------------
# Text Cleaning
# ------------------------------
def clean_text(text):
    for tag in ['\n', '\t']:
        text = text.replace(tag, '')

    text = ''.join([x for x in text if x not in string.punctuation])
    text = ' '.join([t for t in text.split() if t.lower() not in stopwords])

    if isinstance(text, str):
        for key, value in contractions.items():
            text = text.replace(key, value)

    return text

# ------------------------------
# User Input
# ------------------------------
input_text = st.text_area("‚úçÔ∏è Enter your text here")

if input_text:
    # Word Counter
    word_count = len(input_text.split())
    st.write(f"üìä **Word Count:** {word_count}")

    input_ = clean_text(input_text)
    clf_svm = pickle.load(open('clf.pkl', 'rb'))
    tfidf = pickle.load(open('tfidf.pkl', 'rb'))
    text = tfidf.transform([input_])
    result = clf_svm.predict(text)

    if result:
        st.markdown('<div class="result-box">‚úÖ Your text is generated by <span style="color:#e74c3c;">AI</span>.</div>', unsafe_allow_html=True)
    else:
        st.markdown('<div class="result-box">üßë‚Äçüíª Your text is written by a <span style="color:#2ecc71;">Human</span>.</div>', unsafe_allow_html=True)

# ------------------------------
# Footer with Attribution
# ------------------------------
st.markdown(
    """
    <div class="footer">
        Developed with ‚ù§Ô∏è by <b>Ujjwal Sharma</b><br>
        üìß <a href="mailto:sharmaujjwal247@gmail.com" style="color:#f1f1f1;">sharmaujjwal247@gmail.com</a>
    </div>
    """,
    unsafe_allow_html=True
)
